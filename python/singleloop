#!/usr/bin/python
# jkb 24/3/2025
# this version is specialised to B=2, i.e. the original algorithm

import argparse
from   fractions import Fraction
#import logger
from logbook import Logger, StreamHandler  # https://logbook.readthedocs.io/en/stable/index.html
import random
import sys


StreamHandler(sys.stdout).push_application()
log = Logger('nested.log')

parser = argparse.ArgumentParser("nested")
parser.add_argument("N", type=int, help="Select i uniformly at random from the range 0 <= i < N.")
args = parser.parse_args()
log.info(sys.argv)
N=args.N
print(f"N={N}")

c=0
v=1
p=Fraction(1,1)
w=Fraction(1,1)

print(f"v = {v}, c = {c}, p = {p}")

while (v < N) :
    v=2*v
    r=random.randrange(2)
    c=2*c + r
    p=p/2
    print(f"v = {v}, r = {r}, c = {c}, p = {p}")
    if (c >= N) :
        w=w*Fraction(v-N,v)
        v=v-N
        c=c-N
        print(f"reduced: v = {v}, c = {c}, w = {w}")

w=w*Fraction(N,v)
print(f"done: v = {v}, c = {c} found in w = {w} of the state space at probability p = {p}")
print(c)
