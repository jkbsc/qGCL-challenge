#!/usr/bin/python
# jkb 23/2/2025

import argparse
from   fractions import Fraction
#import logger
from logbook import Logger, StreamHandler  # https://logbook.readthedocs.io/en/stable/index.html
import random
import sys


StreamHandler(sys.stdout).push_application()
log = Logger('coroutine.log')

parser = argparse.ArgumentParser("coroutine")
parser.add_argument("N", type=int, help="Select i uniformly at random from the range 0 <= i < N.")
args = parser.parse_args()
log.info(sys.argv)
N=args.N
print(f"N={N}")


def expand (v:int, c:int) :
    """Expand the state space from length v until the state space is longer than N. Note that the selected point (c) will continue to
be uniform-at-random from the expanded range.  Maintaining this is part of the invariant.
    """
    while (v < N) :
        v = 2*v
        r=random.randrange(2)
        c=2*c + r
        print(f"v = {v}, r = {r}, c = {c}")

    if (c < N) :
        return v,c
    else :
        print(f"setup({v},{c})  (N={N})")
        return setup(v,c)

    
def setup (v:int, c:int) :
    """setup the next outer cycle.
    Precondition c >= N
    """
    log.debug(f"Precondition c={c} >= N={N}")
    assert c >= N
    v = v - N
    c = c - N
    print(f"expand({v},{c})  (N={N})")
    return expand(v,c)


print(f"coroutine N={N}")

print(f"expand(1,0)  (N={N})")
v,c=expand(1,0)
print(f"{c}")

